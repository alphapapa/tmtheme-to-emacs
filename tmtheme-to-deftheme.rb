require 'plist4r'
require 'color'

plist = Plist4r.open ARGV[0]

SCOPE_MAP = [
             ["class",                "font-lock-type-face"],
             ["comment",              "font-lock-comment-face"],
             ["constant",             "font-lock-constant-face"],
             ["constant.language",    "font-lock-builtin-face"],
             ["diff.header",          "diff-file-header"],
             ["entity",               "font-lock-type-face"],
             ["entity.name.function", "font-lock-function-name-face"],
             ["invalid.illegal",      "error"],
             ["invalid.deprecated",   "font-lock-warning-face"],
             ["keyword",              "font-lock-keyword-face"],
             ["markup.changed",       "diff-changed"],
             ["markup.deleted",       "diff-removed"],
             ["markup.inserted",      "diff-added"],
             ["meta.preprocessor.c",  "font-lock-preprocessor-face"],
             ["string",               "font-lock-string-face"],
             ["variable",             "font-lock-variable-name-face"]
            ]

TM_SCOPES = SCOPE_MAP.map(&:first)
EMACS_FACES = SCOPE_MAP.map(&:last)

def lookup_scope scope
  if scope.index(",")
    names = scope.split(",").map(&:strip)
    first_match = names.map{|n| TM_SCOPES.find_index n }.compact.first
  else
    first_match = TM_SCOPES.find_index(scope)
  end
  if first_match.nil?
    nil
  else
    EMACS_FACES[first_match]
  end
end

def make_attr(s, k)
  ":#{k} \"#{s[k]}\"" if s[k]
end

# TODO: Extend to allow more attributes (bold, italic etc.)
# Check what tmTheme allows.

def face_attrs(s)
  "#{make_attr(s, "foreground")} #{make_attr(s, "background")}"
end

def map_scope_to_emacslisp(hash)
  emacs_face = lookup_scope hash["scope"]
  settings = hash["settings"]
  return nil if emacs_face.nil?
  {face: emacs_face, settings: settings}
end

long_theme_name = "#{plist["name"]}-theme".downcase.tr(' _', '-')
theme_name = "#{plist["name"]}".downcase.tr(' _', '-')
emacs_faces = plist["settings"].collect{|s| map_scope_to_emacslisp(s) if s["scope"] }.compact
base_settings = plist["settings"][0]["settings"]

base_bg = Color::RGB.from_html base_settings["background"]
base_fg = Color::RGB.from_html base_settings["foreground"]

begin
  # Duplicate the comment face attributes to use with the comment delimiter
  comment_face = emacs_faces.select{|f| f[:face] == "font-lock-comment-face"}[0]
  if comment_face
    emacs_faces << {face: "font-lock-comment-delimiter-face", settings: comment_face[:settings]}
  end
rescue

end

# Heredoc template
puts <<-EOF
;;; #{long_theme_name}.el --- an Emacs 24 theme based on #{plist["name"]} (tmTheme)
;;
;;; Author: Auto Converted to Emacs 24 by tmtheme-to-deftheme
;;; Version: #{Time.now.to_i}
;;; Original author: #{plist["author"]}
;;; Url: https://github.com/emacsfodder/tmThemeToDeftheme
;;; Package-Requires: ((emacs "24.0"))
;;
;;; Commentary:
;;  This theme was automatically generated by tmtheme-to-deftheme,
;;  from #{plist["name"]} (tmTheme) by #{plist["author"]}
;;
;;; Code:

(deftheme #{theme_name}
  "#{long_theme_name} - Created by tmtheme-to-deftheme - #{Time.now.to_s}")

(custom-theme-set-variables
 '#{theme_name}
 '(linum-format " %7i ")
 '(fringe-mode 5 nil (fringe))
)

(custom-theme-set-faces
 '#{theme_name}
 ;; basic theming.

'(default ((t (#{face_attrs(base_settings)}))))
'(region  ((t (:background "#{base_settings["selection"]}"))))
'(cursor  ((t (:background "#{base_settings["caret"]}"))))

;; Temporary defaults
'(linum                               ((t (:foreground "#{base_bg.adjust_brightness(90).html}"  :background "#{base_bg.adjust_brightness(30).html}" ))))
'(minibuffer-prompt                   ((t (:foreground "#1278A8"  :background nil       :weight bold                                  ))))
'(escape-glyph                        ((t (:foreground "orange"   :background nil                                                     ))))
'(highlight                           ((t (:foreground "orange"   :background nil                                                     ))))
'(shadow                              ((t (:foreground "#777777"  :background nil                                                     ))))
'(secondary-selection                 ((t (                       :background "#342858"                                               ))))
'(trailing-whitespace                 ((t (:foreground "#FFFFFF"  :background "#C74000"                                               ))))
'(link                                ((t (:foreground "#00b7f0"  :background nil       :underline t                                  ))))
'(link-visited                        ((t (:foreground "#4488cc"                       :underline t :inherit (link)                  ))))
'(button                              ((t (:foreground "#FFFFFF"  :background "#444444" :underline t :inherit (link)                  ))))
'(fringe                              ((t (                       :background "#{base_bg.adjust_brightness(30).html}" ))))
'(next-error                          ((t (                                             :inherit (region)                             ))))
'(query-replace                       ((t (                                             :inherit (isearch)                            ))))
'(header-line                         ((t (:foreground "#EEEEEE"  :background "#444444" :box nil :inherit (mode-line)                 ))))
'(mode-line-highlight                 ((t (                                             :box nil                                      ))))
'(mode-line-emphasis                  ((t (                                             :weight bold                                  ))))
'(mode-line-buffer-id                 ((t (                                             :box nil :weight bold                         ))))
'(mode-line-inactive                  ((t (:foreground "#{base_fg.adjust_brightness(-20).html}"  :background "#{base_bg.adjust_brightness(-20).html}" :box nil :weight light :inherit (mode-line)   ))))
'(mode-line                           ((t (:foreground "#{base_fg.html}"  :background "#{base_bg.adjust_brightness(-40).html}" :box nil ))))
'(isearch                             ((t (:foreground "#99ccee"  :background "#444444"                                               ))))
'(isearch-fail                        ((t (                       :background "#ffaaaa"                                               ))))
'(lazy-highlight                      ((t (                       :background "#77bbdd"                                               ))))
'(match                               ((t (                       :background "#3388cc"                                               ))))
'(tooltip                             ((t (:foreground "black"    :background "LightYellow" :inherit (variable-pitch)                 ))))
'(js3-function-param-face             ((t (:foreground "#BFC3A9"                                                                      ))))
'(js3-external-variable-face          ((t (:foreground "#F0B090"  :bold t                                                             ))))
'(cua-rectangle                       ((t (:foreground "#E0E4CC"  :background "#342858" ))))

;; flyspell-mode
'(flyspell-incorrect                  ((t (:underline "#AA0000" :background nil :inherit nil ))))
'(flyspell-duplicate                  ((t (:underline "#009945" :background nil :inherit nil ))))

;; flymake-mode
'(flymake-errline                     ((t (:underline "#AA0000" :background nil :inherit nil ))))
'(flymake-warnline                    ((t (:underline "#009945" :background nil :inherit nil ))))

;; Magit hightlight
'(magit-item-highlight                ((t (:foreground "white" :background "#1278A8" :inherit nil ))))

;;git-gutter
'(git-gutter:added                    ((t (:foreground "#609f60" :bold t))))
'(git-gutter:modified                 ((t (:foreground "#3388cc" :bold t))))
'(git-gutter:deleted                  ((t (:foreground "#cc3333" :bold t))))

'(diff-added                          ((t (:background "#305030"))))
'(diff-removed                        ((t (:background "#903010"))))
'(diff-file-header                    ((t (:background "#362145"))))
'(diff-context                        ((t (:foreground "#E0E4CC"))))
'(diff-changed                        ((t (:foreground "#3388cc"))))
'(diff-hunk-header                    ((t (:background "#242130"))))

EOF

# TODO: These default should be overriden when the emacs_faces below
# are evaluated, but it'd be much cleaner if we managed it a better
# way.  Perhaps keep the default faces as a hash and then merge the
# tmtheme translated face hash, before writing out the face
# definitions.
#
# TODO: Infer color values of defaults based on the provided palette,
# using suitable tonal emphasis/de-emphasis as necessary.

emacs_faces.each do |e|
  puts "'(#{e[:face]} ((t (#{face_attrs(e[:settings])}))))"
end

# TODO: For rainbow-delimiters we should sample the color palette
# converted, and then create a gradient to pick the colors for the
# delimiter depth.

puts <<-EOF
) ;; Close color faces block

;; Rainbow delimiters
(defun #{theme_name}-rainbow-delim-set-face ()
  (set-face-attribute 'rainbow-delimiters-depth-1-face nil :foreground "#4A7D90")
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil :foreground "#2C4B56")
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "#1A2D33")
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil :foreground "#237A9A")
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil :foreground "#2C5C62")
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil :foreground "#1A374D")
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil :foreground "#135A8A")
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil :foreground "#225C65")
  (set-face-attribute 'rainbow-delimiters-depth-9-face nil :foreground "#14373C")
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil :foreground "#660000"))

(eval-after-load "rainbow-delimiters" '(#{theme_name}-rainbow-delim-set-face))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme '#{theme_name})

;; Local Variables:
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; #{long_theme_name}.el ends here

EOF
