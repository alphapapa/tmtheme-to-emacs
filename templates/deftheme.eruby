;;; <%= @long_theme_name %>.el --- an Emacs 24 theme based on <%= @name %> (tmTheme)
;;
;;; Author: Auto Converted to Emacs 24 by tmtheme-to-deftheme (tm2deftheme)
;;; Version: <%= Time.now.to_i %>
;;; Original author: <%= @author %>
;;; Url: https://github.com/emacsfodder/tmtheme-to-deftheme
;;; Package-Requires: ((emacs "24.0"))
;;
;;; Commentary:
;;  This theme was automatically generated by tmtheme-to-deftheme (tm2deftheme),
;;  from <%= @name %> (tmTheme) by <%= @author %>
;;
;;; Code:

(deftheme <%= @theme_name %>
  "<%= @long_theme_name %> - Created by tmtheme-to-deftheme - <%= Time.now.to_s %>")

(custom-theme-set-variables
 '<%= @theme_name %>
 '(linum-format " %7i ")
 '(fringe-mode 5 nil (fringe))
)

(custom-theme-set-faces
 '<%= @theme_name %>
 ;; basic theming.

 '(default ((t (<%= face_attrs(@base_settings) %>))))
 '(region  ((t (:background "<%= @base_settings["selection"] %>"))))
 '(cursor  ((t (:background "<%= @base_settings["caret"] %>"))))

 ;; Temporary defaults
 '(linum                               ((t (:foreground "<%= @base_bg.adjust_brightness(90).html %>"  :background "<%= @base_bg.adjust_brightness(30).html %>" ))))
 '(minibuffer-prompt                   ((t (:foreground "#1278A8"  :background nil       :weight bold                                  ))))
 '(escape-glyph                        ((t (:foreground "orange"   :background nil                                                     ))))
 '(highlight                           ((t (:foreground "orange"   :background nil                                                     ))))
 '(shadow                              ((t (:foreground "#777777"  :background nil                                                     ))))
 '(secondary-selection                 ((t (                       :background "#342858"                                               ))))
 '(trailing-whitespace                 ((t (:foreground "#FFFFFF"  :background "#C74000"                                               ))))
 '(link                                ((t (:foreground "#00b7f0"  :background nil       :underline t                                  ))))
 '(link-visited                        ((t (:foreground "#4488cc"                       :underline t :inherit (link)                  ))))
 '(button                              ((t (:foreground "#FFFFFF"  :background "#444444" :underline t :inherit (link)                  ))))
 '(fringe                              ((t (                       :background "<%= @base_bg.adjust_brightness(30).html %>" ))))
 '(next-error                          ((t (                                             :inherit (region)                             ))))
 '(query-replace                       ((t (                                             :inherit (isearch)                            ))))
 '(header-line                         ((t (:foreground "#EEEEEE"  :background "#444444" :box nil :inherit (mode-line)                 ))))
 '(mode-line-highlight                 ((t (                                             :box nil                                      ))))
 '(mode-line-emphasis                  ((t (                                             :weight bold                                  ))))
 '(mode-line-buffer-id                 ((t (                                             :box nil :weight bold                         ))))
 '(mode-line-inactive                  ((t (:foreground "<%= @base_fg.adjust_brightness(-20).html %>"  :background "<%= @base_bg.adjust_brightness(-20).html %>" :box nil :weight light :inherit (mode-line)   ))))
 '(mode-line                           ((t (:foreground "<%= @base_fg.html %>"  :background "<%= @base_bg.adjust_brightness(-40).html %>" :box nil ))))
 '(isearch                             ((t (:foreground "#99ccee"  :background "#444444"                                               ))))
 '(isearch-fail                        ((t (                       :background "#ffaaaa"                                               ))))
 '(lazy-highlight                      ((t (                       :background "#77bbdd"                                               ))))
 '(match                               ((t (                       :background "#3388cc"                                               ))))
 '(tooltip                             ((t (:foreground "black"    :background "LightYellow" :inherit (variable-pitch)                 ))))
 '(js3-function-param-face             ((t (:foreground "#BFC3A9"                                                                      ))))
 '(js3-external-variable-face          ((t (:foreground "#F0B090"  :bold t                                                             ))))
 '(cua-rectangle                       ((t (:foreground "#E0E4CC"  :background "#342858" ))))

 ;; flyspell-mode
 '(flyspell-incorrect                  ((t (:underline "#AA0000" :background nil :inherit nil ))))
 '(flyspell-duplicate                  ((t (:underline "#009945" :background nil :inherit nil ))))

 ;; flymake-mode
 '(flymake-errline                     ((t (:underline "#AA0000" :background nil :inherit nil ))))
 '(flymake-warnline                    ((t (:underline "#009945" :background nil :inherit nil ))))

 ;; Magit hightlight
 '(magit-item-highlight                ((t (:foreground "white" :background "#1278A8" :inherit nil ))))

 ;;git-gutter
 '(git-gutter:added                    ((t (:foreground "#609f60" :bold t))))
 '(git-gutter:modified                 ((t (:foreground "#3388cc" :bold t))))
 '(git-gutter:deleted                  ((t (:foreground "#cc3333" :bold t))))

 '(diff-added                          ((t (:background "#305030"))))
 '(diff-removed                        ((t (:background "#903010"))))
 '(diff-file-header                    ((t (:background "#362145"))))
 '(diff-context                        ((t (:foreground "#E0E4CC"))))
 '(diff-changed                        ((t (:foreground "#3388cc"))))
 '(diff-hunk-header                    ((t (:background "#242130"))))
<%
# TODO: defaults should be overriden when the @emacs_faces below
# are evaluated, it'd be much cleaner if we managed it a better
# way.  Perhaps keep the default faces as a hash and then merge the
# tmtheme translated face hash, before writing out the face
# definitions.
#
# TODO: Infer color values of defaults based on the provided palette,
# using suitable tonal emphasis/de-emphasis as necessary.
%>

<% @emacs_faces.each do |e| debug_out e[:face] %>
 '(<%= e[:face] %> ((t (<%= face_attrs(e[:settings]) %>))))
<% end %>)
<%
# TODO: For rainbow-delimiters we should sample the color palette
# converted, and then create a gradient to pick the colors for the
# delimiter depth.
%>

<% if @rainbow_parens && @rainbow_parens.count == 10 %>
;; Rainbow delimiters
(defun <%= @theme_name %>-rainbow-delim-set-face ()
<% @rainbow_parens[0,9].each_with_index do |e,i| %>
  (set-face-attribute 'rainbow-delimiters-depth-<%= i + 1 %>-face nil :foreground "<%= e %>")
<% end %>
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil :foreground "<%= @rainbow_parens[9] %>"))

(eval-after-load "rainbow-delimiters" '(<%= @theme_name %>-rainbow-delim-set-face))

<% end %>
;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme '<%= @theme_name %>)

;; Local Variables:
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; <%= @long_theme_name %>.el ends here
